# https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
# Workflows commands (::set-output): # https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter

name: Test Build and Deploy ‚öôüê•üöÄ

on:
  push:
    branches: [main]

  pull_request:
    branches: [main]

jobs:
  test_and_build:
    name: Test Build ‚öôüõ†

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [16.x, 14.x]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2.3.4

      - name: Use Node.js ${{ matrix.node-version }} üì¶
        uses: actions/setup-node@v2.1.5
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path üêà
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node_modules üß∂
        uses: actions/cache@v2.1.6
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules/.cache
          key: ${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies ‚ú®
        run: yarn install --frozen-lockfile --check-files

      - name: Run linter üë®üèª‚Äçüíª
        run: yarn lint

      - name: Run formatter üíÖ
        run: yarn format

      - name: Run test üõ†
        run: yarn test

      - name: Run build ‚öô
        run: yarn build

      - name: Cache build ready to deploy üöÄ
        uses: actions/cache@v2.1.6
        with:
          path: |
            ./dist
            ./package.json
            ./pm2.yml
            ./tsconfig-paths-bootstrap.js
            ./tsconfig.json
            ./yarn.lock
          key: ${{ github.sha }}-${{ runner.os }}-${{ matrix.node-version }}

  deploy:
    name: Deploy to production ‚ú®üöÄ

    needs: test_and_build

    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [14.x]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Configure SSH ‚öô
        env:
          SSH_USER: ${{ secrets.PRODUCTION_SSH_USER }}
          SSH_HOST: ${{ secrets.PRODUCTION_SSH_HOST }}
          SSH_PORT: ${{ secrets.PRODUCTION_SSH_PORT }}
          SSH_KEY: ${{ secrets.PRODUCTION_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/production.key
          chmod 600 ~/.ssh/production.key
          cat <<EOF >~/.ssh/config
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            Port $SSH_PORT
            IdentityFile ~/.ssh/production.key
            BatchMode yes
            StrictHostKeyChecking no
          EOF

      - name: Restore build cache ‚ôªÔ∏è
        uses: actions/cache@v2.1.6
        with:
          path: |
            ./dist
            ./package.json
            ./pm2.yml
            ./tsconfig-paths-bootstrap.js
            ./tsconfig.json
            ./yarn.lock
          key: ${{ github.sha }}-${{ runner.os }}-${{ matrix.node-version }}

      - name: Setup remote host ENV üåè
        env:
          DISCORD_TOKEN: ${{ secrets.PRODUCTION_DISCORD_TOKEN }}
          DB_URI: ${{ secrets.PRODUCTION_DB_URI }}
        run: |
          cat <<EOF >./.env
          NODE_ENV=production
          DISCORD__BOT_TOKEN=$DISCORD_TOKEN
          DB_URI=$DB_URI
          PREFIX=
          EOF

      - name: Upload build state to remote host üÜô
        run: rsync -rltDvzOh --delete ./ production:${{ secrets.PRODUCTION_SSH_PATH }}

      - name: Install dependencies in remote host ‚ú®
        run: ssh production 'cd ${{ secrets.PRODUCTION_SSH_PATH }} && yarn --production --check-files'

      - name: Run Emperor Ruppy üê•
        run: ssh production 'if pm2 describe emperor-ruppy; then pm2 restart emperor-ruppy; else cd ${{ secrets.PRODUCTION_SSH_PATH }} && yarn start; fi'
